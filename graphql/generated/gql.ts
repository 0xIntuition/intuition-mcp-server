/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query GetAccountInfo($address: String!) {\n    account(id: $address) {\n      image\n      label\n      id\n      atoms {\n        id\n        label\n        data\n        value {\n          thing {\n            description\n          }\n        }\n        vault {\n          total_shares\n          positions_aggregate(where: { account_id: { _eq: $address } }) {\n            nodes {\n              account {\n                id\n              }\n              shares\n            }\n          }\n        }\n      }\n      triples {\n        id\n        subject {\n          id\n          label\n          value {\n            thing {\n              id\n              image\n              description\n            }\n            account {\n              id\n              label\n              image\n            }\n            person {\n              id\n              image\n              description\n            }\n            organization {\n              id\n              image\n              description\n            }\n          }\n        }\n        predicate {\n          id\n          label\n          value {\n            thing {\n              id\n              image\n              description\n            }\n            account {\n              id\n              label\n              image\n            }\n            person {\n              id\n              image\n              description\n            }\n            organization {\n              id\n              image\n              description\n            }\n          }\n        }\n        object {\n          id\n          label\n          value {\n            thing {\n              id\n              image\n              description\n            }\n            account {\n              id\n              label\n              image\n            }\n            person {\n              id\n              image\n              description\n            }\n            organization {\n              id\n              image\n              description\n            }\n          }\n        }\n      }\n      claims {\n        triple {\n          id\n          subject {\n            id\n            label\n            value {\n              thing {\n                id\n                image\n                description\n              }\n              account {\n                id\n                label\n                image\n              }\n              person {\n                id\n                image\n                description\n              }\n              organization {\n                id\n                image\n                description\n              }\n            }\n          }\n          predicate {\n            id\n            label\n            value {\n              thing {\n                id\n                image\n                description\n              }\n              account {\n                id\n                label\n                image\n              }\n              person {\n                id\n                image\n                description\n              }\n              organization {\n                id\n                image\n                description\n              }\n            }\n          }\n          object {\n            id\n            label\n            value {\n              thing {\n                id\n                image\n                description\n              }\n              account {\n                id\n                label\n                image\n              }\n              person {\n                id\n                image\n                description\n              }\n              organization {\n                id\n                image\n                description\n              }\n            }\n          }\n        }\n        shares\n        counter_shares\n      }\n      positions(where: { account_id: { _eq: $address } }) {\n        id\n        shares\n        vault {\n          id\n          position_count\n          total_shares\n          current_share_price\n          atom {\n            id\n            label\n            image\n            value {\n              thing {\n                id\n                image\n                description\n              }\n              account {\n                id\n                label\n                image\n              }\n              person {\n                id\n                image\n                description\n              }\n              organization {\n                id\n                image\n                description\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetAccountInfoDocument,
    "\n  query SearchAtoms($likeStr: String!) {\n    atoms(\n      where: { label: { _ilike: $likeStr } }\n      order_by: { vault: { position_count: desc } }\n    ) {\n      id\n      label\n      value {\n        account {\n          id\n          label\n        }\n        person {\n          name\n          description\n          email\n          identifier\n        }\n        thing {\n          url\n          name\n          description\n        }\n        organization {\n          name\n          email\n          description\n          url\n        }\n      }\n      vault {\n        position_count\n        current_share_price\n        total_shares\n      }\n      as_subject_triples {\n        id\n        object {\n          id\n          label\n          emoji\n          image\n        }\n        predicate {\n          emoji\n          label\n          image\n          id\n        }\n        counter_vault {\n          position_count\n          current_share_price\n          total_shares\n        }\n        vault {\n          position_count\n          current_share_price\n          total_shares\n        }\n      }\n    }\n  }\n": typeof types.SearchAtomsDocument,
    "\n  query SearchLists($str: String!) {\n    predicate_objects(\n      where: { object: { label: { _ilike: $str } } }\n      order_by: { claim_count: desc }\n    ) {\n      claim_count\n      triple_count\n      object {\n        label\n        id\n      }\n    }\n  }\n": typeof types.SearchListsDocument,
};
const documents: Documents = {
    "\n  query GetAccountInfo($address: String!) {\n    account(id: $address) {\n      image\n      label\n      id\n      atoms {\n        id\n        label\n        data\n        value {\n          thing {\n            description\n          }\n        }\n        vault {\n          total_shares\n          positions_aggregate(where: { account_id: { _eq: $address } }) {\n            nodes {\n              account {\n                id\n              }\n              shares\n            }\n          }\n        }\n      }\n      triples {\n        id\n        subject {\n          id\n          label\n          value {\n            thing {\n              id\n              image\n              description\n            }\n            account {\n              id\n              label\n              image\n            }\n            person {\n              id\n              image\n              description\n            }\n            organization {\n              id\n              image\n              description\n            }\n          }\n        }\n        predicate {\n          id\n          label\n          value {\n            thing {\n              id\n              image\n              description\n            }\n            account {\n              id\n              label\n              image\n            }\n            person {\n              id\n              image\n              description\n            }\n            organization {\n              id\n              image\n              description\n            }\n          }\n        }\n        object {\n          id\n          label\n          value {\n            thing {\n              id\n              image\n              description\n            }\n            account {\n              id\n              label\n              image\n            }\n            person {\n              id\n              image\n              description\n            }\n            organization {\n              id\n              image\n              description\n            }\n          }\n        }\n      }\n      claims {\n        triple {\n          id\n          subject {\n            id\n            label\n            value {\n              thing {\n                id\n                image\n                description\n              }\n              account {\n                id\n                label\n                image\n              }\n              person {\n                id\n                image\n                description\n              }\n              organization {\n                id\n                image\n                description\n              }\n            }\n          }\n          predicate {\n            id\n            label\n            value {\n              thing {\n                id\n                image\n                description\n              }\n              account {\n                id\n                label\n                image\n              }\n              person {\n                id\n                image\n                description\n              }\n              organization {\n                id\n                image\n                description\n              }\n            }\n          }\n          object {\n            id\n            label\n            value {\n              thing {\n                id\n                image\n                description\n              }\n              account {\n                id\n                label\n                image\n              }\n              person {\n                id\n                image\n                description\n              }\n              organization {\n                id\n                image\n                description\n              }\n            }\n          }\n        }\n        shares\n        counter_shares\n      }\n      positions(where: { account_id: { _eq: $address } }) {\n        id\n        shares\n        vault {\n          id\n          position_count\n          total_shares\n          current_share_price\n          atom {\n            id\n            label\n            image\n            value {\n              thing {\n                id\n                image\n                description\n              }\n              account {\n                id\n                label\n                image\n              }\n              person {\n                id\n                image\n                description\n              }\n              organization {\n                id\n                image\n                description\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetAccountInfoDocument,
    "\n  query SearchAtoms($likeStr: String!) {\n    atoms(\n      where: { label: { _ilike: $likeStr } }\n      order_by: { vault: { position_count: desc } }\n    ) {\n      id\n      label\n      value {\n        account {\n          id\n          label\n        }\n        person {\n          name\n          description\n          email\n          identifier\n        }\n        thing {\n          url\n          name\n          description\n        }\n        organization {\n          name\n          email\n          description\n          url\n        }\n      }\n      vault {\n        position_count\n        current_share_price\n        total_shares\n      }\n      as_subject_triples {\n        id\n        object {\n          id\n          label\n          emoji\n          image\n        }\n        predicate {\n          emoji\n          label\n          image\n          id\n        }\n        counter_vault {\n          position_count\n          current_share_price\n          total_shares\n        }\n        vault {\n          position_count\n          current_share_price\n          total_shares\n        }\n      }\n    }\n  }\n": types.SearchAtomsDocument,
    "\n  query SearchLists($str: String!) {\n    predicate_objects(\n      where: { object: { label: { _ilike: $str } } }\n      order_by: { claim_count: desc }\n    ) {\n      claim_count\n      triple_count\n      object {\n        label\n        id\n      }\n    }\n  }\n": types.SearchListsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAccountInfo($address: String!) {\n    account(id: $address) {\n      image\n      label\n      id\n      atoms {\n        id\n        label\n        data\n        value {\n          thing {\n            description\n          }\n        }\n        vault {\n          total_shares\n          positions_aggregate(where: { account_id: { _eq: $address } }) {\n            nodes {\n              account {\n                id\n              }\n              shares\n            }\n          }\n        }\n      }\n      triples {\n        id\n        subject {\n          id\n          label\n          value {\n            thing {\n              id\n              image\n              description\n            }\n            account {\n              id\n              label\n              image\n            }\n            person {\n              id\n              image\n              description\n            }\n            organization {\n              id\n              image\n              description\n            }\n          }\n        }\n        predicate {\n          id\n          label\n          value {\n            thing {\n              id\n              image\n              description\n            }\n            account {\n              id\n              label\n              image\n            }\n            person {\n              id\n              image\n              description\n            }\n            organization {\n              id\n              image\n              description\n            }\n          }\n        }\n        object {\n          id\n          label\n          value {\n            thing {\n              id\n              image\n              description\n            }\n            account {\n              id\n              label\n              image\n            }\n            person {\n              id\n              image\n              description\n            }\n            organization {\n              id\n              image\n              description\n            }\n          }\n        }\n      }\n      claims {\n        triple {\n          id\n          subject {\n            id\n            label\n            value {\n              thing {\n                id\n                image\n                description\n              }\n              account {\n                id\n                label\n                image\n              }\n              person {\n                id\n                image\n                description\n              }\n              organization {\n                id\n                image\n                description\n              }\n            }\n          }\n          predicate {\n            id\n            label\n            value {\n              thing {\n                id\n                image\n                description\n              }\n              account {\n                id\n                label\n                image\n              }\n              person {\n                id\n                image\n                description\n              }\n              organization {\n                id\n                image\n                description\n              }\n            }\n          }\n          object {\n            id\n            label\n            value {\n              thing {\n                id\n                image\n                description\n              }\n              account {\n                id\n                label\n                image\n              }\n              person {\n                id\n                image\n                description\n              }\n              organization {\n                id\n                image\n                description\n              }\n            }\n          }\n        }\n        shares\n        counter_shares\n      }\n      positions(where: { account_id: { _eq: $address } }) {\n        id\n        shares\n        vault {\n          id\n          position_count\n          total_shares\n          current_share_price\n          atom {\n            id\n            label\n            image\n            value {\n              thing {\n                id\n                image\n                description\n              }\n              account {\n                id\n                label\n                image\n              }\n              person {\n                id\n                image\n                description\n              }\n              organization {\n                id\n                image\n                description\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAccountInfo($address: String!) {\n    account(id: $address) {\n      image\n      label\n      id\n      atoms {\n        id\n        label\n        data\n        value {\n          thing {\n            description\n          }\n        }\n        vault {\n          total_shares\n          positions_aggregate(where: { account_id: { _eq: $address } }) {\n            nodes {\n              account {\n                id\n              }\n              shares\n            }\n          }\n        }\n      }\n      triples {\n        id\n        subject {\n          id\n          label\n          value {\n            thing {\n              id\n              image\n              description\n            }\n            account {\n              id\n              label\n              image\n            }\n            person {\n              id\n              image\n              description\n            }\n            organization {\n              id\n              image\n              description\n            }\n          }\n        }\n        predicate {\n          id\n          label\n          value {\n            thing {\n              id\n              image\n              description\n            }\n            account {\n              id\n              label\n              image\n            }\n            person {\n              id\n              image\n              description\n            }\n            organization {\n              id\n              image\n              description\n            }\n          }\n        }\n        object {\n          id\n          label\n          value {\n            thing {\n              id\n              image\n              description\n            }\n            account {\n              id\n              label\n              image\n            }\n            person {\n              id\n              image\n              description\n            }\n            organization {\n              id\n              image\n              description\n            }\n          }\n        }\n      }\n      claims {\n        triple {\n          id\n          subject {\n            id\n            label\n            value {\n              thing {\n                id\n                image\n                description\n              }\n              account {\n                id\n                label\n                image\n              }\n              person {\n                id\n                image\n                description\n              }\n              organization {\n                id\n                image\n                description\n              }\n            }\n          }\n          predicate {\n            id\n            label\n            value {\n              thing {\n                id\n                image\n                description\n              }\n              account {\n                id\n                label\n                image\n              }\n              person {\n                id\n                image\n                description\n              }\n              organization {\n                id\n                image\n                description\n              }\n            }\n          }\n          object {\n            id\n            label\n            value {\n              thing {\n                id\n                image\n                description\n              }\n              account {\n                id\n                label\n                image\n              }\n              person {\n                id\n                image\n                description\n              }\n              organization {\n                id\n                image\n                description\n              }\n            }\n          }\n        }\n        shares\n        counter_shares\n      }\n      positions(where: { account_id: { _eq: $address } }) {\n        id\n        shares\n        vault {\n          id\n          position_count\n          total_shares\n          current_share_price\n          atom {\n            id\n            label\n            image\n            value {\n              thing {\n                id\n                image\n                description\n              }\n              account {\n                id\n                label\n                image\n              }\n              person {\n                id\n                image\n                description\n              }\n              organization {\n                id\n                image\n                description\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchAtoms($likeStr: String!) {\n    atoms(\n      where: { label: { _ilike: $likeStr } }\n      order_by: { vault: { position_count: desc } }\n    ) {\n      id\n      label\n      value {\n        account {\n          id\n          label\n        }\n        person {\n          name\n          description\n          email\n          identifier\n        }\n        thing {\n          url\n          name\n          description\n        }\n        organization {\n          name\n          email\n          description\n          url\n        }\n      }\n      vault {\n        position_count\n        current_share_price\n        total_shares\n      }\n      as_subject_triples {\n        id\n        object {\n          id\n          label\n          emoji\n          image\n        }\n        predicate {\n          emoji\n          label\n          image\n          id\n        }\n        counter_vault {\n          position_count\n          current_share_price\n          total_shares\n        }\n        vault {\n          position_count\n          current_share_price\n          total_shares\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchAtoms($likeStr: String!) {\n    atoms(\n      where: { label: { _ilike: $likeStr } }\n      order_by: { vault: { position_count: desc } }\n    ) {\n      id\n      label\n      value {\n        account {\n          id\n          label\n        }\n        person {\n          name\n          description\n          email\n          identifier\n        }\n        thing {\n          url\n          name\n          description\n        }\n        organization {\n          name\n          email\n          description\n          url\n        }\n      }\n      vault {\n        position_count\n        current_share_price\n        total_shares\n      }\n      as_subject_triples {\n        id\n        object {\n          id\n          label\n          emoji\n          image\n        }\n        predicate {\n          emoji\n          label\n          image\n          id\n        }\n        counter_vault {\n          position_count\n          current_share_price\n          total_shares\n        }\n        vault {\n          position_count\n          current_share_price\n          total_shares\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchLists($str: String!) {\n    predicate_objects(\n      where: { object: { label: { _ilike: $str } } }\n      order_by: { claim_count: desc }\n    ) {\n      claim_count\n      triple_count\n      object {\n        label\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchLists($str: String!) {\n    predicate_objects(\n      where: { object: { label: { _ilike: $str } } }\n      order_by: { claim_count: desc }\n    ) {\n      claim_count\n      triple_count\n      object {\n        label\n        id\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;